import cv2
import numpy as np
import face_recognition
import os

path = 'faces'
images = []
classNames = []
personList = os.listdir(path)


for cl in personList:
    curPerson = cv2.imread(f'{path}/{cl}')
    images.append(curPerson)
    classNames.append(os.path.splitext(cl)[0])
print(classNames)

def findEncodings(image):
    encodelist = []
    for img in images:
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        encode = face_recognition.face_encodings(img)[0]
        encodelist.append(encode)
    return encodelist

encodelistknown = findEncodings(images)
print(encodelistknown)
print('Encoding Complete')

cap = cv2.VideoCapture(0)

while True:
    _, img = cap.read()
    #img = cv2.resize(img , (0,0), None, 0.25, 0.25)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

    faceCurrentFrame = face_recognition.face_locations(img)
    encodeCurrentFrame = face_recognition.face_encodings(img, faceCurrentFrame)

    for encodeface, faceloc in zip(encodeCurrentFrame, faceCurrentFrame):
        matches = face_recognition.compare_faces(encodelistknown, encodeface)
        faceDis = face_recognition.face_distance(encodelistknown, encodeface)
        matchIndex = np.argmin(faceDis)

        if matches[matchIndex]:
            name = classNames[matchIndex].upper()
            print(name)
            y1, x2, y2, x1 = faceloc
            y1, x2, y2, x1 = y1*4, x2*4, y2*4, x1*4
            cv2.rectangle(img, (x1, y1), (x2, y2), (0,0,255), 2)
            cv2.rectangle(img, (x1, y2-35), (x2, y2), (0.0, 255), cv2.FILLED)
            cv2.putText(img, name, (x1+6, y2-6), cv2.FONT_HERSHEY_COMPLEX, 1, (255,255,255), 2)


    cv2.imshow('Face Recognition', img)
    cv2.waitKey(1)
